<<< JAVA 정리 >>>

패키지 사용하는 이유 -> 수많은 클래스들의 관계가 뒤엉키는 것을 방지하기 위해
같은 패키지 안에 들어있으면 -> 그 패키지안에 클래스 막 쓸 수 있음
다른 패키지에 있는 클래스를 사용하려면 -> import쓰거나, 안쓸거면 그냥 패키지.클래스.메서드() 이런식으로 사용가능

빌트인 패키지:
    - 일반적인 import와는 다르게 패키지, 클래스면 없이 접근 가능
    
static 변수 :
    - 메모리에 한 번 할당되어 프로그램이 종료될 떄 비로소 해제됨 (안바뀌는것??)
    - 클래스 자체에 속함(접근방법: 클래스.static변수), 인스턴스에 속한 변수가 아님
    - 모든 인스턴스가 같은 스테틱 변수의 값을 공유하기 떄문에 어디서 접근하든 값이 같음
    - 가비지 컬렉터가 관리하는 영역 밖에 있음 -> 잘못하면 프로그램 종료시까지 메모리가 할당된 채로 낭비될 수 있음
    - 스태틱(데이터) 영역 -> 가장 오랫동안 남아있는 메모리 부분 (전역변수, )
    >> 그니까 내가 A_class의 obj1에서도 staticVar를 접근하면 같은 값이 나오고, A_class의 obj2에서도 staticVar를 접근하면 같은 값이 나온다는것!!! 그 클래스의 인스턴스들에서 공유하는 변수가 정적 변수
    -  

업캐스팅 다운캐스팅 :
    - 

참조 자료형:
    - 게터세터로 값을 바꿔주고
    - 변수에 들어가는 건 주소이고, 주소값으로 이동해서 메모리상에 객체가 저장되어있음

부동소수점:
    - 

String 클래스:
    - new 안해도 내부적으로 알아서 객체를 만들어줌
        ex) String str = '안녕하세요'

메이븐? 빌드 자동화 도구
    - 

public static void main 분석:
    -   

System.out.println() 분석:
    - System 클래스의 

